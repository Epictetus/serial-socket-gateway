#!/usr/bin/env ruby
begin
  require 'serialport' # system gem
rescue LoadError => e
  STDERR.puts 'cannot load serialport from system, loading rubygems...'
end
require 'rubygems'
require 'serialport' # ruby gem
require 'eventmachine'
require 'ArgsParser'
require 'socket'

parser = ArgsParser.parser
parser.bind(:help, :h, 'show help')
parser.comment(:bps, 'default : 9600')
parser.comment(:bit, 'default : 8')
parser.comment(:stopbit, 'default : 1')
parser.comment(:parity, 'default : 0')
parser.comment(:port, 'TCP Port - default : 8782')
parser.comment(:serial_out_interval, 'default : 0 (sec)')
serial_device, params = parser.parse(ARGV)

params[:bps] = 9600 unless params[:bps]
params[:bit] = 8 unless params[:bit]
params[:stopbit] = 1 unless params[:stopbit]
params[:parity] = 0 unless params[:parity]
params[:port] = 8782 unless params[:port]
params[:serial_out_interval] = 0 unless params[:serial_out_interval]

if !serial_device or parser.has_option(:help)
  puts parser.help
  if RUBY_PLATFORM =~ /mswin|mingw|cygwin|bccwin/
    puts 'e.g. serial-socket-gateway COM1'
  else
    puts 'e.g. serial-socket-gateway /dev/tty.your-usbdevice'
  end
  exit 1
end

begin
  sock = TCPServer.open params[:port].to_i
  puts "starting server - TCP Port #{params[:port].to_i}"
rescue => e
  STDERR.puts 'cannot oopen tcp port!!'
  STDERR.puts e
  exit 1
end


clients = Array.new
serial_to_clients = Array.new
clients_to_serial = Array.new

begin
  sp = SerialPort.new(serial_device, params[:bps].to_i, params[:bit].to_i, params[:stopbit].to_i, params[:parity].to_i) # 9600bps, 8bit, stopbit 1, parity none
rescue => e
  STDERR.puts 'cannot open serialport!!'
  STDERR.puts e
  exit 1
end


EventMachine::run do

  # serial -> STDOUT
  EventMachine::defer do
    loop do
      data = sp.gets
      next unless data
      serial_to_clients << data
      puts data
    end
  end

  # STDIN -> serial
  EventMachine::defer do
    loop do
      line = gets
      sp.puts line
    end
  end
  
  # serial -> clients
  EventMachine::defer do
    loop do
      while serial_to_clients.size > 0 do
        data = serial_to_clients.shift
        errors = Array.new
        clients.each{|c|
          begin
            c.puts data
          rescue => e
            errors << c
            STDERR.puts "--- #{e}"
          end
        }
        errors.each{|c|
          clients.delete(c)
          c.close
          puts "--- 1 socket client closed"
        }
      end
    end
  end


  # clients -> serial
  EventMachine::defer do
    loop do
      while clients_to_serial.size > 0 do
        line = clients_to_serial.shift
        puts "(socket) #{line}"
        sp.puts line rescue exit 1
        sleep params[:serial_out_interval].to_f
      end
      sleep 0.1
    end
  end
  
  
  # check clients connection
  EventMachine::defer do
    loop do
      errors = Array.new
      clients.each{|c|
        begin
          c.puts ''
        rescue => e
          STDERR.puts "--- #{e}"
          errors << c
        end
      }
      errors.each{|c|
        clients.delete(c)
        c.close
      }
      sleep 10
    end
  end
  
  # accept socket clients
  EventMachine::defer do
      loop do
      c = sock.accept
      clients << c
      puts "--- new clients : #{clients.size}"
      EventMachine::defer do
        loop do
          line = c.gets
          next unless line
          clients_to_serial << line
        end
      end
    end
  end

end

sp.close
